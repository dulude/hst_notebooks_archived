Traceback (most recent call last):
  File "/usr/share/miniconda/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/usr/share/miniconda/lib/python3.10/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/usr/share/miniconda/lib/python3.10/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/usr/share/miniconda/lib/python3.10/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/usr/share/miniconda/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
    return future.result()
  File "/usr/share/miniconda/lib/python3.10/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/usr/share/miniconda/lib/python3.10/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/usr/share/miniconda/lib/python3.10/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# This code cell condenses the key material of the Notebook into a single cell summary.

# 1. Import the necessary libraries:
from astropy.table import Table
from astropy.io import fits
from astroquery.mast import Observations
from cos_functions import estimate_snr
import matplotlib.pyplot as plt

# 2. Download an example dataset using astroquery:
# For more information, see the "Downloading your data" Notebook in this git repository
onecell_x1dsum_data_products = Observations.download_products(
    Observations.filter_products(
        Observations.get_product_list(
            Observations.query_criteria(
                obs_id="LDM701020"  # The Obs ID of the observation to download
            )
        ),
        # Only downloads the 1 dimensional extracted spectrum
        productSubGroupDescription="X1DSUM"
    )
)

# 3. Read in the data to an Astropy Table:
x1dsum_data_table = Table.read(onecell_x1dsum_data_products["Local Path"][0])
# Some users may be familiar with another way to read in FITS table data, though it can be less user-friendly:
with fits.open(onecell_x1dsum_data_products["Local Path"][0]) as hdulist:
    alternate_x1dsum_data_structure = hdulist[1].data

# 4. Estimate the S/N ratio of the spectrum by calculating sqrt(counts):
#    The `estimate_snr` function is defined in the associated file: `cos_functions.py`
SNR_estimate = estimate_snr(x1dsum_data_table, binsize_=6, verbose=False)

# 5. Create a plot of the spectrum and the estimated S/N:
# Create 2-subplots and populate the upper one with the flux and the lower with S/N:
fig, (ax0, ax1) = plt.subplots(2, 1, figsize=(10, 8), sharex=True, dpi=100)
for i, segment_row in enumerate(x1dsum_data_table):
    # In the upper panel, plot the spectrum as Flux over Wavelength:
    ax0.plot(segment_row["WAVELENGTH"],
             segment_row["FLUX"], label=f"Segment FUV{'AB'[i]}")
    # In the lower panel, plot the S/N ratio as estimated S/N over Wavelength:
    ax1.plot(SNR_estimate[1][i][0], SNR_estimate[1]
             [i][1], label=f"Segment FUV{'AB'[i]}")
# Format the plot and save
ax0.legend()
# Adds a title of fontsize 20 points
ax0.set_title("Fig. 0.1\nSimple COS G160M Spectrum", size=20)
# Adds y axis label to the top panel
ax0.set_ylabel('Flux [$erg\ s^{-1}\ cm^{-2}\ Angstrom^{-1}$]', size=10)
# Adds y axis label to the bottom panel
ax1.set_ylabel(
    'Estimated  $\dfrac{SIGNAL}{NOISE}$  for a resolution element', size=10)
# Adds x axis label to the bottom panel
ax1.set_xlabel('Wavelength [$\AA$]', size=12)
plt.tight_layout()
plt.savefig("./Fig_0.1_quick_plot.png")
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mHTTPError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[1], line 15[0m
[1;32m      8[0m [38;5;28;01mimport[39;00m [38;5;21;01mmatplotlib[39;00m[38;5;21;01m.[39;00m[38;5;21;01mpyplot[39;00m [38;5;28;01mas[39;00m [38;5;21;01mplt[39;00m
[1;32m     10[0m [38;5;66;03m# 2. Download an example dataset using astroquery:[39;00m
[1;32m     11[0m [38;5;66;03m# For more information, see the "Downloading your data" Notebook in this git repository[39;00m
[1;32m     12[0m onecell_x1dsum_data_products [38;5;241m=[39m Observations[38;5;241m.[39mdownload_products(
[1;32m     13[0m     Observations[38;5;241m.[39mfilter_products(
[1;32m     14[0m         Observations[38;5;241m.[39mget_product_list(
[0;32m---> 15[0m             [43mObservations[49m[38;5;241;43m.[39;49m[43mquery_criteria[49m[43m([49m
[1;32m     16[0m [43m                [49m[43mobs_id[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mLDM701020[39;49m[38;5;124;43m"[39;49m[43m  [49m[38;5;66;43;03m# The Obs ID of the observation to download[39;49;00m
[1;32m     17[0m [43m            [49m[43m)[49m
[1;32m     18[0m         ),
[1;32m     19[0m         [38;5;66;03m# Only downloads the 1 dimensional extracted spectrum[39;00m
[1;32m     20[0m         productSubGroupDescription[38;5;241m=[39m[38;5;124m"[39m[38;5;124mX1DSUM[39m[38;5;124m"[39m
[1;32m     21[0m     )
[1;32m     22[0m )
[1;32m     24[0m [38;5;66;03m# 3. Read in the data to an Astropy Table:[39;00m
[1;32m     25[0m x1dsum_data_table [38;5;241m=[39m Table[38;5;241m.[39mread(onecell_x1dsum_data_products[[38;5;124m"[39m[38;5;124mLocal Path[39m[38;5;124m"[39m][[38;5;241m0[39m])

File [0;32m/usr/share/miniconda/lib/python3.10/site-packages/astroquery/utils/class_or_instance.py:25[0m, in [0;36mclass_or_instance.__get__.<locals>.f[0;34m(*args, **kwds)[0m
[1;32m     23[0m [38;5;28;01mdef[39;00m [38;5;21mf[39m([38;5;241m*[39margs, [38;5;241m*[39m[38;5;241m*[39mkwds):
[1;32m     24[0m     [38;5;28;01mif[39;00m obj [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[0;32m---> 25[0m         [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mfn[49m[43m([49m[43mobj[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwds[49m[43m)[49m
[1;32m     26[0m     [38;5;28;01melse[39;00m:
[1;32m     27[0m         [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39mfn([38;5;28mcls[39m, [38;5;241m*[39margs, [38;5;241m*[39m[38;5;241m*[39mkwds)

File [0;32m/usr/share/miniconda/lib/python3.10/site-packages/astroquery/utils/process_asyncs.py:26[0m, in [0;36masync_to_sync.<locals>.create_method.<locals>.newmethod[0;34m(self, *args, **kwargs)[0m
[1;32m     22[0m [38;5;129m@class_or_instance[39m
[1;32m     23[0m [38;5;28;01mdef[39;00m [38;5;21mnewmethod[39m([38;5;28mself[39m, [38;5;241m*[39margs, [38;5;241m*[39m[38;5;241m*[39mkwargs):
[1;32m     24[0m     verbose [38;5;241m=[39m kwargs[38;5;241m.[39mpop([38;5;124m'[39m[38;5;124mverbose[39m[38;5;124m'[39m, [38;5;28;01mFalse[39;00m)
[0;32m---> 26[0m     response [38;5;241m=[39m [38;5;28;43mgetattr[39;49m[43m([49m[38;5;28;43mself[39;49m[43m,[49m[43m [49m[43masync_method_name[49m[43m)[49m[43m([49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m
[1;32m     27[0m     [38;5;28;01mif[39;00m kwargs[38;5;241m.[39mget([38;5;124m'[39m[38;5;124mget_query_payload[39m[38;5;124m'[39m) [38;5;129;01mor[39;00m kwargs[38;5;241m.[39mget([38;5;124m'[39m[38;5;124mfield_help[39m[38;5;124m'[39m):
[1;32m     28[0m         [38;5;28;01mreturn[39;00m response

File [0;32m/usr/share/miniconda/lib/python3.10/site-packages/astroquery/utils/class_or_instance.py:25[0m, in [0;36mclass_or_instance.__get__.<locals>.f[0;34m(*args, **kwds)[0m
[1;32m     23[0m [38;5;28;01mdef[39;00m [38;5;21mf[39m([38;5;241m*[39margs, [38;5;241m*[39m[38;5;241m*[39mkwds):
[1;32m     24[0m     [38;5;28;01mif[39;00m obj [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[0;32m---> 25[0m         [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mfn[49m[43m([49m[43mobj[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwds[49m[43m)[49m
[1;32m     26[0m     [38;5;28;01melse[39;00m:
[1;32m     27[0m         [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39mfn([38;5;28mcls[39m, [38;5;241m*[39margs, [38;5;241m*[39m[38;5;241m*[39mkwds)

File [0;32m/usr/share/miniconda/lib/python3.10/site-packages/astroquery/mast/observations.py:303[0m, in [0;36mObservationsClass.query_criteria_async[0;34m(self, pagesize, page, **criteria)[0m
[1;32m    299[0m     service [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_caom_filtered
[1;32m    300[0m     params [38;5;241m=[39m {[38;5;124m"[39m[38;5;124mcolumns[39m[38;5;124m"[39m: [38;5;124m"[39m[38;5;124m*[39m[38;5;124m"[39m,
[1;32m    301[0m               [38;5;124m"[39m[38;5;124mfilters[39m[38;5;124m"[39m: mashup_filters}
[0;32m--> 303[0m [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_portal_api_connection[49m[38;5;241;43m.[39;49m[43mservice_request_async[49m[43m([49m[43mservice[49m[43m,[49m[43m [49m[43mparams[49m[43m)[49m

File [0;32m/usr/share/miniconda/lib/python3.10/site-packages/astroquery/utils/class_or_instance.py:25[0m, in [0;36mclass_or_instance.__get__.<locals>.f[0;34m(*args, **kwds)[0m
[1;32m     23[0m [38;5;28;01mdef[39;00m [38;5;21mf[39m([38;5;241m*[39margs, [38;5;241m*[39m[38;5;241m*[39mkwds):
[1;32m     24[0m     [38;5;28;01mif[39;00m obj [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[0;32m---> 25[0m         [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mfn[49m[43m([49m[43mobj[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwds[49m[43m)[49m
[1;32m     26[0m     [38;5;28;01melse[39;00m:
[1;32m     27[0m         [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39mfn([38;5;28mcls[39m, [38;5;241m*[39margs, [38;5;241m*[39m[38;5;241m*[39mkwds)

File [0;32m/usr/share/miniconda/lib/python3.10/site-packages/astroquery/mast/discovery_portal.py:363[0m, in [0;36mPortalAPI.service_request_async[0;34m(self, service, params, pagesize, page, **kwargs)[0m
[1;32m    360[0m     mashup_request[prop] [38;5;241m=[39m value
[1;32m    362[0m req_string [38;5;241m=[39m _prepare_service_request_string(mashup_request)
[0;32m--> 363[0m response [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_request[49m[43m([49m[38;5;124;43m"[39;49m[38;5;124;43mPOST[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mMAST_REQUEST_URL[49m[43m,[49m[43m [49m[43mdata[49m[38;5;241;43m=[39;49m[43mreq_string[49m[43m,[49m[43m [49m[43mheaders[49m[38;5;241;43m=[39;49m[43mheaders[49m[43m,[49m
[1;32m    364[0m [43m                         [49m[43mretrieve_all[49m[38;5;241;43m=[39;49m[43mretrieve_all[49m[43m)[49m
[1;32m    366[0m [38;5;28;01mreturn[39;00m response

File [0;32m/usr/share/miniconda/lib/python3.10/site-packages/astroquery/mast/discovery_portal.py:190[0m, in [0;36mPortalAPI._request[0;34m(self, method, url, params, data, headers, files, stream, auth, retrieve_all)[0m
[1;32m    187[0m     [38;5;28;01mraise[39;00m [38;5;167;01mTimeoutError[39;00m([38;5;124m"[39m[38;5;124mTimeout limit of [39m[38;5;132;01m{}[39;00m[38;5;124m exceeded.[39m[38;5;124m"[39m[38;5;241m.[39mformat([38;5;28mself[39m[38;5;241m.[39mTIMEOUT))
[1;32m    189[0m [38;5;66;03m# Raising error based on HTTP status if necessary[39;00m
[0;32m--> 190[0m [43mresponse[49m[38;5;241;43m.[39;49m[43mraise_for_status[49m[43m([49m[43m)[49m
[1;32m    192[0m result [38;5;241m=[39m response[38;5;241m.[39mjson()
[1;32m    194[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m result:  [38;5;66;03m# kind of hacky, but col_config service returns nothing if there is an error[39;00m

File [0;32m/usr/share/miniconda/lib/python3.10/site-packages/requests/models.py:1021[0m, in [0;36mResponse.raise_for_status[0;34m(self)[0m
[1;32m   1016[0m     http_error_msg [38;5;241m=[39m (
[1;32m   1017[0m         [38;5;124mf[39m[38;5;124m"[39m[38;5;132;01m{[39;00m[38;5;28mself[39m[38;5;241m.[39mstatus_code[38;5;132;01m}[39;00m[38;5;124m Server Error: [39m[38;5;132;01m{[39;00mreason[38;5;132;01m}[39;00m[38;5;124m for url: [39m[38;5;132;01m{[39;00m[38;5;28mself[39m[38;5;241m.[39murl[38;5;132;01m}[39;00m[38;5;124m"[39m
[1;32m   1018[0m     )
[1;32m   1020[0m [38;5;28;01mif[39;00m http_error_msg:
[0;32m-> 1021[0m     [38;5;28;01mraise[39;00m HTTPError(http_error_msg, response[38;5;241m=[39m[38;5;28mself[39m)

[0;31mHTTPError[0m: 503 Server Error: Service Unavailable for url: https://mast.stsci.edu/api/v0/invoke
HTTPError: 503 Server Error: Service Unavailable for url: https://mast.stsci.edu/api/v0/invoke

